<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Edward Taylor]]></title>
  <link href="http://edwardtaylor.github.io/atom.xml" rel="self"/>
  <link href="http://edwardtaylor.github.io/"/>
  <updated>2013-11-18T00:18:20+00:00</updated>
  <id>http://edwardtaylor.github.io/</id>
  <author>
    <name><![CDATA[T. Edward Taylor Jr.]]></name>
    <email><![CDATA[edward@echo22.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant + Rails]]></title>
    <link href="http://edwardtaylor.github.io/blog/2013/11/17/vagrant-rails/"/>
    <updated>2013-11-17T22:56:00+00:00</updated>
    <id>http://edwardtaylor.github.io/blog/2013/11/17/vagrant-rails</id>
    <content type="html"><![CDATA[<h3>Vagrant</h3>

<p>Over the past year I&rsquo;ve been using a Ubuntu VM image for developing all my Rails applications. I&rsquo;ve tried installing everything on my Windows box but constantly hit odd scenarios with Gems that didn&rsquo;t <em>just work</em> for one reason or another. I finally gave up and switched over to a Ubuntu virtual image and everything has been much more pleasant. In addition, there&rsquo;s a large support group of developers also working on a similar platform so many issues are resolved by a quick search.</p>

<p><strong>Enter <a href="(http://www.vagrantup.com">Vagrant</a></strong></p>

<p>It&rsquo;s a god-send to RoR developers who must use Windows as their default operating system for whatever reason (e.g. Work policy, .Net projects, shared home system).</p>

<p>Vagrant allows you to:</p>

<blockquote><p>&ldquo;Create and configure lightweight, reproducible, and portable development environments.&rdquo;</p></blockquote>

<p>Vagrant creates a super light-weight headless virtual machine using your provider of choice (VMWare, VirtualBox, AWS). Rather than allocating a gig or more of RAM to a Ubuntu virtual image, Vagrant only requires the bare minimum of resources required for a headless operating system. Of course you can scale your virtual image up or down depending on your needs. This mixed with Rails development is a phenomenal way to quickly create development images for yourself and your colleagues.</p>

<p>After you have a Vagrant box up and running, a synced folder can be created between your host system and virtual image. This allows the developer to work on the host system while still writing code to the virtual image. In addition, Vagrant can forward ports from the host system to the virtual image allowing <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a> to work like a charm.</p>

<p>There are lots of pre-configured boxes available for Vagrant. I found a Rails vagrant image hosted on GitHub at <a href="https://github.com/railsmn/railsmn-dev-box">https://github.com/railsmn/railsmn-dev-box</a>. Here are the steps I used to setup my Rails 4 environment on Windows.</p>

<h3>Setup Vagrant Image</h3>

<ol>
<li>Download <a href="http://downloads.vagrantup.com/">Vagrant</a></li>
<li><p>Clone the railsmn-dev-box repo</p>

<pre><code>mkdir rails
git clone git://github.com/railsmn/railsmn-dev-box.git rails
cd rails
</code></pre></li>
<li><p>Modify script for Rails 4</p>

<p>Open <code>./puppet/manifests/default.pp</code> and set Rails version. I wanted latest so I removed the current 3.2 version</p>

<pre><code>exec { "${as_vagrant} 'gem install rails --no-rdoc --no-ri'":
    creates =&gt; "${home}/.rvm/bin/rails",
    require =&gt; Exec['install_ruby']
}
</code></pre></li>
<li><p>Add your shared workspace</p>

<p>Open <code>./Vagrantfile</code> and add the following line</p>

<pre><code>config.vm.synced_folder  "workspace", "/home/vagrant/workspace"
</code></pre>

<p>The first parameter is the host folder relative to the root Vagrantfile. The second parameter is the full path on the virtual system. I created a workspace folder and then clone each project I&rsquo;m working on underneath the root workspace folder.</p>

<p>More information: <a href="http://docs.vagrantup.com/v2/synced-folders">http://docs.vagrantup.com/v2/synced-folders</a></p></li>
<li><p>Start the image <code>vagrant up</code></p></li>
<li><p>SSH into your client</p>

<p>I used PuTTY <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download">(download)</a></p>

<p>To find out your settings, type the following after the machine boots:</p>

<pre><code>vagrant ssh
</code></pre>

<p>Here&rsquo;s my output</p>

<pre><code>Host: 127.0.0.1
Port: 2222
Username: vagrant
Private key: C:/Users/Edward/.vagrant.d/insecure_private_key
</code></pre>

<p><strong>PuTTY Configuration</strong></p>

<ol type="a">
<li>Enter the Host Name: 127.0.0.1</li>
<li>Enter the Port: 2222</li>
<li>Go to Connection\Data
Enter the UserName (vagrant) in Auto-login field</li>
<li>Go to Connection\SSH\Auth
Browser for you private key at the location listed above</li>
<li>Go to Session
Enter a name under Saved Sessions and hit SAVE!</li>
</ol>
</li>
<li><p>Start Session, the default password is <code>vagrant</code></p></li>
</ol>


<p>Enjoy!</p>

<h3>Resources:</h3>

<ul>
<li><a href="(http://www.vagrantup.com">Vagrant</a></li>
<li><a href="https://github.com/mitchellh/vagrant/wiki/Available-Vagrant-Boxes">Official Vagrant Boxes</a></li>
<li><a href="http://www.vagrantbox.es/">Community Boxes &ndash; VagrantBox.es</a></li>
<li>[railsmn-dev-box] (<a href="https://github.com/railsmn/railsmn-dev-box">https://github.com/railsmn/railsmn-dev-box</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bounded Contexts]]></title>
    <link href="http://edwardtaylor.github.io/blog/2013/09/03/bounded-contexts/"/>
    <updated>2013-09-03T20:04:00+00:00</updated>
    <id>http://edwardtaylor.github.io/blog/2013/09/03/bounded-contexts</id>
    <content type="html"><![CDATA[<h3>Bounded Contexts</h3>

<p><em>Define: Bounded Context is a principle of strategical mapping out our domain models and setting consistency boundaries. A model (entity) is guaranteed to be consistent inside of its BC.</em></p>

<p>Let&rsquo;s break it down. Ever heard the phrase, &ldquo;Jack of all trades, master of none.&rdquo; Too many times we have seen systems that try to be everything to everybody and end up with a mediocre system with half-baked functionality. These systems tend to suffer from tight coupling and cannot be extended or changed easily without substantial risk. The problem lies with sharing the same model throughout your entire application. Different domains require different sets of information, workflows, views, and validation.</p>

<p>By defining our bounded contexts, we explicitly state the responsibilities and expectations for each model. A &ldquo;recurring gift&rdquo; means entirely different things to a fundraiser, an accountant, and a payment processor. Instead of getting the three personas in a room and having a fight to the finish of what the &ldquo;real&rdquo; definition of &ldquo;recurring gift&rdquo; means, let them each work inside their domain.</p>

<blockquote><p>&ldquo;Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius &mdash; and a lot of courage &mdash; to move in the opposite direction.&rdquo; &ndash; Albert Einstein</p></blockquote>

<p>Complexity is the true arch-nemesis of software development and Bounded Contexts are another weapon we can use to keep our applications simple and maintainable. Drawing these clear boundaries allows us to deploy/scale to the specific needs of each domain. Each Bounded Context can pick the technologies and architecture best suited for their domain. There are several BCs where a simple CRUD application will suffice while others may require different approaches. In the end, the constraints imposed by Bounded Context add incredible amounts of flexibility and freedom to choose the best solution for a given domain.</p>

<p>Resources:</p>

<ul>
<li><p><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain-Driven Design: Tackling Complexity in the Heart of Software</a> Eric Evans</p></li>
<li><p><a href="http://www.infoq.com/articles/ddd-contextmapping">Strategic Domain Driven Design with Context Mapping</a></p></li>
<li><p><a href="http://dddcommunity.org/uncategorized/bounded-context">Bounded Context &ndash; Definition</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embracing BDD]]></title>
    <link href="http://edwardtaylor.github.io/blog/2013/08/05/embracing-bdd/"/>
    <updated>2013-08-05T23:30:00+00:00</updated>
    <id>http://edwardtaylor.github.io/blog/2013/08/05/embracing-bdd</id>
    <content type="html"><![CDATA[<h3>Wikipedia Definition</h3>

<blockquote><p>Behavior-driven development combines the general techniques and principles of <a href="http://en.wikipedia.org/wiki/Test-driven_development">test-driven-development</a> with ideas from <a href="http://en.wikipedia.org/wiki/Domain-driven_design">domain-driven design</a> and <a href="http://en.wikipedia.org/wiki/Object-oriented_analysis_and_design">object-oriented analysis and design</a> to provide software developers and business analysts with shared tools and a shared process to collaborate on software development, with the aim of delivering software that matters (as opposed to software that doesn&rsquo;t matter).</p></blockquote>

<h3>Not about the tests</h3>

<p>Most people&rsquo;s first reaction when being introduced to TDD and BDD is thinking these methodologies are all about writing tests. The value realized by writing tests lies not with the instant gratification of seeing a green check after writing code, but the thought process and team collaboration that occurs prior to coding. The principles of BDD bring the team together to share a common understanding of the functionality a feature will provide after its implementation. As an added bonus, automated testing builds the support system required to allow the team to refactor and embrace change within the application.</p>

<p>Veterans of TDD understand and appreciate the work-flow TDD provides to add structure to development process. TDD breaks down the implementation process into small incremental pieces and creates of work-flow where the developer is constantly asserting the expected behavior of the code written. BDD strives to bring these same benefits to the entire team and external customers by providing a framework which focuses on functionality delivered and not the implementation details.</p>

<h3>Ubiquitous Language</h3>

<p>BDD complements the practice of Domain-Driven-Design and shares the concept of a <a href="http://martinfowler.com/bliki/UbiquitousLanguage.html">ubiquitous language</a>. While also being a $5 dollar term, the ubiquitous language is defined by Eric Evans in his book, <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain Driven Design</a> (the blue book), as a &ldquo;language structured around the domain model and used by all team members to connect all the activities of the team with the software.&rdquo;</p>

<p>This common language is used by the Customer, Product Owner, Developer, QA, and all members of the team. Instead of communicating in technical terms, everyone on the team communicates using the evolving language. This domain vernacular stretches deep into the implementation details as the code itself represents the shared model the team uses to communicate. Developers will frequently rename methods or classes in response to changes in terminology used by the Customer and Product Owner. Approaching software development practicing DDD allows us to remove unnecessary translation from the non-technical to the technical persons as both parties speak in the same terms. Due note that not all code found within an application will match the domain&rsquo;s language, but we want to strive to have our business model map directly to the mental model shared by the team.</p>

<h3>Specifications</h3>

<p>In the realm of BDD, specifications are written using the ubiquitous language and are the medium used to communicate functionality to all team members. By embracing and defining the domain language, we enable everyone the ability to design, write, and review the constraints and expectations of a feature. What exactly makes up a specification?</p>

<p>Specifications consist of the following:</p>

<ul>
<li>Title &ndash; One line description</li>
<li>Narrative &ndash; Explains the business value of the feature</li>
<li>Acceptance Criteria &ndash; Describes the features functionality by asserting expectations</li>
</ul>


<p>Example:</p>

<pre><code>Title:  Add product to cart

Narrative:  As a customer
            I want to add products to a cart
            So that I can view my current total

Acceptance Criteria:

  Scenario 1: Add Product to Cart
              Given a user viewing the product catalog
              When the user adds a product to the cart
              Then the product is listed in the Cart 
                And the cart total is increased
</code></pre>

<h3>Acceptance Criteria</h3>

<p>We continue to define Acceptance Criteria until there is no more ambiguity surrounding the user story. Once we&rsquo;ve exhausted all the acceptance criteria, the team can properly size and estimate the amount of effort required to complete the feature. This implies all acceptance tests need to be written prior to beginning a sprint or as part of the planning session. Ideally defining the acceptance criteria will take place as part of regular scheduled grooming meetings where the Product Owner can address the entire team about an upcoming features and priority.</p>

<p>What makes an acceptance test?</p>

<ul>
<li>Owned by the customer or Product Owner</li>
<li>Written by the team (Product Owner, Developer, QA)</li>
<li>Focuses on <em>what</em> not <em>how</em></li>
<li>Expressed using the ubiquitous language</li>
<li>Concise, Precise, and unambiguous</li>
</ul>


<h3>Remove ambiguity</h3>

<p>Much like a plumber passes water through a pipe to check the handy work of a patch job, passing data through our tests allows us to see scenarios we missed and removes ambiguity. How are we handling rounding? Are we using Banker&rsquo;s rounding? How do I distribute $1.00 across 12 months? Data helps tell the story and provides concrete examples of the expectations of the feature from all the stakeholders. Part of wrestling complexity in software is removing ambiguity. Following the principles of <em>specifications by example</em>, we learn more about a feature by analyzing the desired outcomes.</p>

<h3>Knowing the answer</h3>

<p>The greatest impact I&rsquo;ve experienced by practicing BDD &amp; TDD comes not from executing the test cases but the process involved in authoring the tests. By thinking about each scenario and the acceptance criteria, I have a more thorough understanding of what I need to accomplish before writing a single line of code. It&rsquo;s truly remarkable how easily the implementation details can be discovered when you know the end result. Have you ever been required to show your work for a calculus problem? How much easier was the problem to solve by knowing the question and the answer. In the event you miscalculated, you quickly notice the error (most of the time prior to completion), and can backtrack to the point your solution deviated. This type of immediate feedback is at the core of driving our implementation details by external specifications.</p>

<h3>Development cycle</h3>

<p>I&rsquo;ll wrap up this post by showcasing this snazzy <a href="http://www.planetgeek.ch/2013/06/05/clean-code-cheat-sheet">workflow</a> that describes how acceptance tests integrate with my current development cycle. Take note of where the process starts and where the first line of code is actually written.</p>

<p><a href="http://edwardtaylor.github.io/images/atdd_tdd_lifecycle.png"><img src="http://edwardtaylor.github.io/images/atdd_tdd_lifecycle.png" alt="ATDD TDD Workflow" /></a></p>

<h3>Additional Reading</h3>

<ul>
<li><a href="http://www.amazon.com/ATDD-Example-Test-Driven-Development-Addison-Wesley/dp/0321784154">ATDD by Example: A Practical Guide to Acceptance Test-Driven Development</a> Markus Gärtner</li>
<li><a href="http://www.amazon.com/Test-Driven-Acceptance-Java-Developers/dp/1932394850">Test Driven: TDD and Acceptance TDD for Java Developers</a> Lasse Koskela</li>
<li><a href="http://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/">The RSpec Book: Behaviour Driven Development with Rspec, Cucumber, and Friends</a> David Chelimsky, Dave Astels, Bryan Helmkamp, Dan North, Zach Dennis, Aslak Hellesoy</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade Sublime Text 2]]></title>
    <link href="http://edwardtaylor.github.io/blog/2013/07/17/upgrade-sublime-text-2/"/>
    <updated>2013-07-17T21:08:00+00:00</updated>
    <id>http://edwardtaylor.github.io/blog/2013/07/17/upgrade-sublime-text-2</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been developing primarily on Windows-based machines and slowly learning (and loving) developing on Linux. My distro of choice is the popular Ubuntu environment mainly due to the overwhelming number of people that also use this distro to develop Rails applications.</p>

<p><a href="http://www.sublimetext.com">Sublime Text</a> is an fantastic text editor and becoming my go-to editor of choice for code. The last time I&rsquo;ve preferred
a text editor over a full-blown IDE was back in my college days when SSHing
into a DEV environment in using vi was the only way I could quickly submit
a class project minutes for the midnight deadline.</p>

<p>After walking through the steps to install Sublime Text it was now time for an upgrade, a new experience for me. Listed below are the steps I took to remove my previous installation and use the new deb installation provided by SublimeText.</p>

<h3>Step One &ndash; Remove the old files</h3>

<p>Remove the previous installation located at <code>/usr/lib/sublime-text</code></p>

<p><strong>Note:</strong> The installation directory may vary so use <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?find">find</a> to locate and remove and files from the previous version.</p>

<h3>Step Two &ndash; Remove application links</h3>

<p>Remove any application links at <code>/usr/share/applications/</code></p>

<p>Read more about the <a href="http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/fhs.html">Linux Directory Hierarchy</a></p>

<h3>Installing Sublime Text 3 (debian package)</h3>

<ol>
<li><p>Go to the <a href="http://www.sublimetext.com/3">download page</a> and download the <strong>deb</strong> package installer for your processor.</p></li>
<li><p>Open the package installer using <strong>Ubuntu Software Center</strong> and install</p></li>
<li><p>Navigate to <code>/usr/share/applications/</code> and drag the sublime-text.desktop icon over to your Unity launcher for quick access</p></li>
<li><p>(Optional) If you would like to position the icon in your list, click and hold (1 second), then icon will lift from the Unity bar and allow you to reposition.</p></li>
</ol>


<p>References:</p>

<ul>
<li><a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></li>
<li><a href="https://help.ubuntu.com/community/UnityLaunchersAndDesktopFiles">https://help.ubuntu.com/community/UnityLaunchersAndDesktopFiles</a></li>
<li><a href="http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/fhs.html">http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/fhs.html</a></li>
<li><a href="http://en.wikipedia.org/wiki/Deb_">http://en.wikipedia.org/wiki/Deb_</a>(file_format)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why blog?]]></title>
    <link href="http://edwardtaylor.github.io/blog/2013/07/07/why-blog/"/>
    <updated>2013-07-07T15:46:00+00:00</updated>
    <id>http://edwardtaylor.github.io/blog/2013/07/07/why-blog</id>
    <content type="html"><![CDATA[<h3>Writing helps me understand my thoughts.</h3>

<p>When I&rsquo;m trying to learn a new topic or tool, writing about the target subject forces me to organize my thoughts into consumable pieces. A good indication that I need to learn more about a specific area occurs when I struggle to explain what I&rsquo;ve learned to someone else. A teacher must first learn the curriculum prior to teaching the class. This blog will be mutually beneficial for myself and for others. The blog directly helps me learn to express
myself by further developing my communication and written skills. In addition, blogging opens up what I&rsquo;m learning to a broader audience for reference.</p>

<p>Blogging complements the &ldquo;learn by doing&rdquo; technique by documenting and archiving all the information I gathered for a particular topic. Whether I&rsquo;m reading about the latest JavaScript micro-library or clever CSS hack, documenting which tools and techniques I&rsquo;ve used provides an incredible resource to myself (and hopefully others).</p>

<p>My name is Edward Taylor and this is my blog.</p>
]]></content>
  </entry>
  
</feed>
